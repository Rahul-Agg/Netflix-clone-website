{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","videoId","opts","height","width","playerVars","autoplay","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchToprated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchAnimatedMovies","fetchDramaMovies","fetchFantasyMovies","fetchDocumentaries","fetchMusicMovies","fetchScifiMovies","fetchMysteryMovies","Banner","str","n","setMovie","sec1","sec2","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1a78d19d.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\nimport \"./Row.css\";\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  // console.table(movies);\r\n  const opts = {\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\nautoplay:1,\r\n    },\r\n  }\r\n\r\n  const handleClick = (movie)=>{\r\n    if(trailerUrl){\r\n      setTrailerUrl('');\r\n    }else{\r\n      movieTrailer(movie?.name || \"\")\r\n      .then((url)=>{\r\n        const urlParams = new URLSearchParams(new URL (url).search);\r\n        setTrailerUrl(urlParams.get('v'));\r\n      })\r\n      .catch((error)=>console.log(error));\r\n    }\r\n};\r\n  return (\r\n    <div className=\"row\">\r\n      <h4>{title}</h4>\r\n      {trailerUrl &&<YouTube videoId={trailerUrl} opts={opts}/>}\r\n\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={()=>handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${baseUrl}${\r\n               isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"62a650c60e67040f0ed5c560890adaa0\";\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchToprated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchAnimatedMovies:`/discover/movie?api_key=${API_KEY}&with_genres=16`,    \r\n    fetchDramaMovies:`/discover/movie?api_key=${API_KEY}&with_genres=18`,\r\n    fetchFantasyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=14`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchMusicMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10402`,\r\n    fetchScifiMovies:`/discover/movie?api_key=${API_KEY}&with_genres=878`,\r\n    fetchMysteryMovies:`/discover/movie?api_key=${API_KEY}&with_genres=9648`,\r\n}\r\nexport default requests;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const sec1 = await axios.get(requests.fetchRomanceMovies);\r\n      const sec2 = await axios.get(requests.fetchNetflixOriginals);\r\n\r\n      const request = [...sec1.data.results, ...sec2.data.results];\r\n\r\n      setMovie(request[Math.floor(Math.random() * request.length - 1)]);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  // console.log(movie);\r\n  function truncate(str,n){\r\n    return str?.length>n ? str.substr(0,n-1)+\"...\" : str;\r\n  }\r\n  const opts = {\r\n    height:\"390\",\r\n    width:\"100%\",\r\n    playerVars:{\r\nautoplay:1,\r\n    },\r\n  }\r\n  const handleClick = (movie)=>{\r\n    if(trailerUrl){\r\n      setTrailerUrl('');\r\n    }else{\r\n      movieTrailer(movie?.name || \"\")\r\n      .then((url)=>{\r\n        const urlParams = new URLSearchParams(new URL (url).search);\r\n        setTrailerUrl(urlParams.get('v'));\r\n      })\r\n      .catch((error)=>console.log(error));\r\n    }\r\n};\r\n  return (\r\n    /* background image */\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        {/* title */}\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        {/* div> 2 buttons */}\r\n        <div className=\"banner_buttons\">\r\n          <button onClick={()=>handleClick(movie)} className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">Add List</button>\r\n        </div>\r\n\r\n        {/* description */}\r\n        <h1 className=\"banner_description\"> {truncate(movie?.overview,150)}</h1>\r\n      </div>\r\n      <div className=\"banner_fadebottom\"/>\r\n      {trailerUrl &&<YouTube videoId={trailerUrl} opts={opts}/>}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState } from \"react\";\r\nimport {useEffect} from 'react'\r\nimport \"./Navbar.css\";\r\n\r\nfunction Navbar() {\r\n    const [show,handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if (window.scrollY>100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    }, []);\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://www.freepnglogos.com/uploads/netflix-logo-history-png-33.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n     alt=\"Netflix-avatar\"\r\n     />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport Banner from './Banner';\nimport requests from './requests';\nimport Navbar from './Navbar';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      \n      <Banner/>\n\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchToprated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Animated Movies\" fetchUrl={requests.fetchAnimatedMovies}/>\n      <Row title=\"Drama Movies\" fetchUrl={requests.fetchDramaMovies}/>\n      <Row title=\"Fantasy Movies\" fetchUrl={requests.fetchFantasyMovies}/>\n      <Row title=\"Music Movies\" fetchUrl={requests.fetchMusicMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n      <Row title=\"Scifi Movies\" fetchUrl={requests.fetchScifiMovies}/>\n      <Row title=\"Mystery Movies\" fetchUrl={requests.fetchMysteryMovies}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}